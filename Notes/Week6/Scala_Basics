SCALA

Scala is scalable language.

Three key things to remember about how Scala operates:

1. JDK - Java Development Kit
    The whole package that contains the resources for running Java programs.
    Contains the JRE, interpreter, and compiler (javac)
2. JRE - Java Runtime Environment
    Provides the minimum required resources for a Java program to run.
    Contains the JVM and all defaults packages necessary for creating programs. (core classes and other supporting files)
3. JVM - Java Virtual Machine
    The accumulation of resoures that will compile and run Java code
    A virtual machine that can run on basically any machine.

Scala is a language written heavily based on Java code.
- runs in the JRE.
- compiled to Bytecode just like Java.
- Basically any machine can run Scala applications.
- High level language like Java.
- Statically Typed.
    The datatype of all objects must be consistent and cannot change unless explicitly declared.
- the goal of Scala is to condense code to write less of it and perform the same functions.
- Version 2.11.12 is the preferred release of Scala for the technologies that we will be using
    Hadoop
    Spark
    Kafka
    Hive

Scala Fundamentals

- Two types of objects in Scala:
    Val (Value) - cannot change its value unless it is redeclared. (immutable)
    Var (Variable) - can change their value without needing to be re-declaed. (mutable)

- Key data types to remember:
    Int
    String
    Float
    Double (bigger float, take on higher precision decimals)
    Long (bigger Int)
    Boolean

    You can enforce datatypes.
    var myvar: Int = 0

    Keywords cannot be used as identifiers
    - You can't name a value "val" or "for"
    - These are keywords: the system compile these as though they are actions or commands.

- Control flow statements
    if-statements (if-else statements)
        An if statements checks a condition, and will execute if the condition is True.
        If the condition is not True, it will instead run the "else" if there is an "else"

        Scala does not compile white space / indents at all.

        if (x > 10) {
            print("X is greater than 10")
        }

        Every block of code is separated using {}, instead of indents like Python.

    You can also write it like if only using one line: if (x > 10) print("X is greater than 10")

    print and println both print the data that you need them to, but println adds a newline.

        if (x > 10) {
            print("x is greater than 10")
        } else if (x < 10) {
            print("x is less than 10")
        } else {
            print("x is 10")
        }
    
    Curly braces are necessary when a block has more than 1 expression.

    for-loops
    - loop for as many iterations as possible.
    
        for (i <- 0 to 10) {
            println(i)
        }

        Use the arrow (<-) to indiciate assignment of the iterated values.

    while-loops
    - loop for as long as a condition holds true.
    - useful when you want to check a value against a counter.

        while (x < 10) {
            println(x*2)
            x += 1
        }

    do-while loop
    - execute a block of code, and then check if the lock will loop based on the condition.
    - The difference between while and do-while is when they check the condition.
    - A do-while loop will always execute at least once.

        do {
            println(x*2)
            x += 1
        } while (x < 10)

- Take a user input.
    
    import scala.io.StdIn.{readLine, readInt}

    val myinput = readLine("Input a number: ")

- Scala Collections:

    Lists:
        val lst1 = List(1,2,3,4,5,6)

        Lists are indexed, ordered, and IMmutable. (even when declared as var)
            - immutabe size
            - immutable values
        Lists allow duplicate values.
        Lists can only hold a single datatype

    Arrays:
        var arr1 = Array(1,2,3,4,5)

        Arrays are mutable in values, but immutable in size.
        To print every value in the array, use 'foreach'

        arr1.foreach(println)   # This is also possible with Lists, Sets, Maps, etc.

        Because the size is immutable, it may be helpful to declare arrays as such:
        var arr2 = new Array[datatype](size of the array)

        Arrays can hold different datatypes, but it will be called type "Any"

        "Any" is the superclass of all datatypes.

        for (i <- 0 to 10) arr2 = i
            - be careful when using indexes, indexes start at 0.
            - Creating an array of size 10, will create indexes from 0 to 9.

    Tuples:
        var tup1 = (1, "Jacob", 4323)
        Tuples like Arrays can take multiple types.
        Tuples allow you to enforce datatypes to each specific index.
        Tuples, like Lists, are immutable in both value and size.

        Tuples are not indexed starting at 0, and the index is declared completely differently.

        arr2(0) # for an array
        tup1._1 # for the tuple.

        Tuples can be used as returns from a function, due to the explicit typing of each index.

        def return_tup(): (Int, Int, String) = {
            return (45, 80, "math")
        }

        This is useful when a function needs to return multiple items.

    Sets:
        More or less exactly as they were in Python.
        - unordered, unindexed
        - immutbale in size and values
        - cannot contain duplicates

        val s1 = Set(1,2,3,4,5))

        Set operations:
        s1.union(s2) # returns all items in the sets excluding duplicates
        s1.intersect(s2) # return all items that exist in both sets
        s1.--(s2) # except, returns all elements that are only in s1, excluding those from s2.

    Maps:
        Are like Python dictionary.
        Map is a collection of key-value pairs.
        Immutable in both size and values.

        m1 = Map("name"->"Jacob", "job"->"trainer")
        m1.get(key name) # This will not create an error if the key doesn't exist.
        m1("Name")       # Will return the value alone, but will give an error if the key doesn't exist.

    ArrayBuffer:

        import scala.collection.mutable.ArrayBuffer

        An array with changeable size.

        var ab1 = ArrayBuffer(1,2,3,4)

        ab1 += 5
        ab1 += (6,7,8)      #both of these will add new values to the Array Buffer

    Mutable Map:

        import scala.collection.mutable.Map

        A Map where the values are allowed to change.

        var mm1 = Map[Int, String]()
        use mm1.put(key,value) to put in new data.


- Creating Functions

    Scala does not indicate a function starting using ':', instead uses {}.
    Scala requires that you indicate the datatype of all arguments and returns.

    Ex. create a function that adds two numbers.

    def my_adder(a: Int, b: Int): Int = {
        return a + b
    }

    White space / indentation DOES NOT MATTER in Scala like in Python.

    Return the type 'Unit' when a function does not return anything.

    def print_name(a:String): Unit = {
        print(a)
    }

    Functions are considered 'first class citizens'
    - Functions can be passed into other functions as arguments.
    - Functions can be saved as variables.
    - Functions can return the output of other functions.


Exercise: Want to create a function that will take a user input for Name, and print out "This person's name is {Name}."

Creating Scala files in VS Code:

    First create a new folder.
    - Inside the main project folder, you will create a folder called 'src',
        - Inside 'src' you will create a folder called 'main'
            - Inside 'main' you will create a folder called 'scala'
    - Create a new file with '.scala' extension in the 'scala' folder.
    - Create an object of the same name as filename in your new file.
    - Create the main function as such:

        object HelloWorld {
            def main(args:Array[String]): Unit = {
                println("Hello World!")
            }
        }

    Then create a new file in the main project folder called 'build.sbt'
    - Insert these lines into the build.sbt file:

        name := "Hello World"
        version := "1.0"
        scalaVersion := "2.11.12"   # The scala version we are using for the training

    When you save the build.sbt file a prompt should appear asking if you want to import the build. Click 'Import Build'.

    When that is done, open a terminal, maneuver to the project folder, and enter 'sbt'
    When that finishes, you should be able to enter 'run' and it should work.

    Alternatively, instead of 'sbt' then 'run', you can type 'scalac filename.scala' and 'scala filename'

Filter
- A function done on collections.
- Creates a new collection with elements from an input collection that satisfy a certain condition.

    val lst2 = List(1,2,3,4,5)

    val result = lst2.filetr(x=>x>2)
    val result = lst2.filetr(_>2)

    val m1 = Map("Jacob"->3,"Bob"->8)
    val result2 = m1.filter(x=> x._1 == "Jacob" && x._2 == 3)

String Interpolation:
- a way to process variables / values as strings.

val name = "Jacob"

println(s"The trainer's name is $name.")

    's' - takes a string input and processes it into the string.
    'f' - treats it as a formatted string, useful for putting numbers into a string.
    'raw' - process the escape sequences such as \n or \t as parts of the string.

Currying:
- the process of transforming a function that takes multiple inputs into a higher-order function that takes in a function as an input.

    *No currying
    def add(x:Int, y:Int, z:Int) = x + y + z

    add(1,2,3)

    *Currying
    def add2(x:Int) = (y:Int) => (z:Int) => x + y + z

    add(1)(2)(3)

    Partial Application - When calling a Curry, you initialize one of its arguments and save that specific application of the function into a new variable.

    val result3 = add(3)(4)
    println(result3(5))

    Why use Currying?
    - Keeps functions pure.
    - Less error prone.
    - Makes functions more modifiable.
    - Less code to write.
    - Useful when using functions multiple times.

    import scala.math.pow

    def calc(x:Int, y:Int) = (x*y, pow(x,y), x+y)

    def calcCurry(x:Int) = (y:Int) => (x*y, pow(x,y), x+y)

Concurrent Programming:
- A way to make multiple tasks occur simultaneously
- Optimizes computer performance.

- Thread: A (simple) task that a computer does.
- When something is multi-threaded, it takes on and performs multiple tasks at the same time.

Create new threads:

class MyThread extends Thread
{
    override def run()
    {
        println("Thread " Thread.currentThread().getName() + " is running.")
    }
}

object test
{
    def main(args:Array[String])
    {
        for (i <- 1 to 5)
        {
            var th = new MyThread()
            th.setName("Thread" + i.toString)
            th.start()
        }
    }
}

- Scala has something called a 'Future' class.
    - Represents information that may or may not currently be available, but will in due time.
    - In the case that a Future never gets executed, it will throw an Exception
    - use case in Big Data: It will take time to retrieve data requested from a server.

    import scala.concurrent.Future
    import scala.concurrent.ExecutionContext.Implicits.global
    import scala.util.{Success,Failure}

    def ShortTask(): Int = 40
    val x = ShortTask()
        - In this funciton, 40 is immiedately assigned to x
    def LongTask(): Future[Int] = ???
    val x = LongTask()
        - In this function, there is nothing immediately assigned
        - x will be given an assignment if the function is ever implemented/executed

    def LongRunningTask() = {
        Thread.sleep(10000)     //Delays the execution of the program for 10000 ms
        40
    }

Case Classes:
    - A special kind of class that can do all the same things a regular class can
    - But it has a few unique methods and implementations.
    - The goal of a case class is making classe seasier to write and instantiate.
    - When a case class is instantiated it has a constructor with some builtin methods.
        apply - makes a default constructor, so you do not need to declare 'new'
        unapply - allows you to do match expressions.
        copy - create a temporary copy of an object. Modify the consutrctor with new arguments.
        equal - lets you compare objects and their data fields.
        hashCode - lets you compare objects based on their spot in memory
        toString - useful for printing messages and debugging.

    case class Person(name: String, age:Int)

    val person1 = Person("Bob",34)

    Fields are 'val' by default

    Unapply use for matching

    trait Person {
        def name: String
    }
    
    case class Student(name: String, grade:Int) extends Person
    case class Teacher(name: String, subject:String) extends Person

    def getPrintableString(arg: Person): String = arg match {
        case Student(name, grade) => s"$name is a student in grade $grade."
        case Teacher(name, subject) => s"$name is a teacher who teaches $subect."
    }

    val s = Student("Bob",5)
    val t = Teacher("Mike","Calculus")
    getPrintableString(s)
    getPintableString(t)